import streamlit as st  # Streamlit √© utilizado para criar interfaces web 
import pandas as pd  
import requests  # Requests √© utilizado para fazer requisi√ß√µes HTTP (GET, POST, etc.)

# Base URL da API do backend (Flask)
BASE_URL = "http://127.0.0.1:5000"
# Definimos a base URL onde o backend est√° rodando (localmente no endere√ßo 127.0.0.1 na porta 5000).
# Todas as requisi√ß√µes da aplica√ß√£o ser√£o enviadas para esse endpoint (ou servi√ßo), concatenando o recurso desejado.

# Fun√ß√£o gen√©rica para fazer requisi√ß√µes ao backend
def fazer_requisicao(endpoint, method="GET", params=None, data=None):
    # Constr√≥i a URL completa concatenando o endpoint espec√≠fico com a base URL
    url = f"{BASE_URL}/{endpoint}"

    # Monta a requisi√ß√£o de acordo com o m√©todo HTTP fornecido
    try:
        if method == "GET":
            response = requests.get(url, params=params)
            # M√©todo GET: Envia os par√¢metros da requisi√ß√£o (params) como query strings na URL.
            # Exemplo: /imoveis?tipo_imovel=Casa&preco_min=200000&preco_max=1000000

        elif method == "POST":
            response = requests.post(url, json=data)
            # M√©todo POST: Envia os dados no corpo da requisi√ß√£o em formato JSON para criar novos recursos no backend.
            # Exemplo: POST /imoveis para criar um novo im√≥vel, enviando os detalhes no corpo da requisi√ß√£o.

        elif method == "PUT":
            response = requests.put(url, json=data)
            # M√©todo PUT: Envia os dados no corpo da requisi√ß√£o em formato JSON para atualizar um recurso existente.

        elif method == "DELETE":
            response = requests.delete(url, params=params)
            # M√©todo DELETE: Envia par√¢metros na URL para deletar um recurso espec√≠fico no backend.

        else:
            st.error("M√©todo HTTP n√£o suportado.")
            # Caso um m√©todo HTTP n√£o suportado seja passado, exibe um erro no frontend do Streamlit.

        # Verifica o status HTTP da resposta
        if response.status_code == 200:
            return response.json()  # Resposta 200 (OK): Retorna o corpo da resposta como um JSON (dicion√°rio Python).
        elif response.status_code == 404:
            st.warning("‚ö†Ô∏è Recurso n√£o encontrado.")
            # Se o status for 404 (Not Found), exibe um aviso de que o recurso n√£o foi encontrado.
        elif response.status_code == 500:
            st.error("‚ö†Ô∏è Erro interno do servidor.")
            # Se o status for 500 (Internal Server Error), exibe um erro gen√©rico de servidor.
        else:
            st.error(f"‚ö†Ô∏è Erro: {response.status_code} - {response.text}")
            # Para outros c√≥digos de status, exibe um erro gen√©rico mostrando o c√≥digo e a mensagem da resposta.

        return None  # Se n√£o houver sucesso, retorna None para indicar falha.

    except Exception as e:
        st.error(f"‚ö†Ô∏è Erro de conex√£o: {e}")
        # Captura e exibe exce√ß√µes, como erros de conex√£o ou outros problemas ao tentar fazer a requisi√ß√£o.
        return None

# T√≠tulo e subt√≠tulo da interface do aplicativo Streamlit
st.title("Imobili√°ria Exemplo")
st.subheader("Encontre o im√≥vel perfeito para voc√™!!!")

# Filtros na barra lateral
st.sidebar.header("üîç Filtros de Pesquisa")

# Tipo de Im√≥vel - Filtro (menu suspenso)
tipo_imovel = st.sidebar.selectbox(
    "Tipo de Im√≥vel",
    ["Apartamento", "Casa", "Terreno", "Kitnet", "S√≠tio"]
)
# O usu√°rio seleciona o tipo de im√≥vel que quer buscar. O valor selecionado √© armazenado na vari√°vel 'tipo_imovel'.

# CEP (Localiza√ß√£o) - Filtro (campo de texto)
cep = st.sidebar.text_input("üìç Digite o CEP")
# O usu√°rio pode digitar o CEP do im√≥vel que deseja buscar. Esse valor √© armazenado na vari√°vel 'cep'.

# Faixa de Pre√ßo - Filtro (slider)
preco_min, preco_max = st.sidebar.slider(
    "üí∞ Faixa de Pre√ßo (R$)",
    min_value=100000,
    max_value=3000000,
    value=(200000, 1000000),
    step=50000
)
# O usu√°rio pode selecionar a faixa de pre√ßo m√≠nima e m√°xima utilizando o slider. 
# 'preco_min' e 'preco_max' armazenam os valores selecionados.

# Fun√ß√£o para buscar im√≥veis
def buscar_imoveis():
    # Par√¢metros para a requisi√ß√£o GET
    params = {
        'tipo_imovel': tipo_imovel,  # Inclui o tipo de im√≥vel selecionado pelo usu√°rio.
        'preco_min': preco_min,      # Inclui o valor m√≠nimo da faixa de pre√ßo selecionada.
        'preco_max': preco_max,      # Inclui o valor m√°ximo da faixa de pre√ßo selecionada.
        'cep': cep if cep else None  # Inclui o CEP se for fornecido, caso contr√°rio, deixa como None.
    }

    # Fazendo a requisi√ß√£o GET para o backend
    data = fazer_requisicao("imoveis", method="GET", params=params)
    # Chama a fun√ß√£o 'fazer_requisicao' para enviar uma requisi√ß√£o GET ao endpoint '/imoveis' do backend,
    # com os par√¢metros (filtros) fornecidos pelo usu√°rio.

    # Se houver dados na resposta, exibir os im√≥veis
    if data and data['resultados']['quantidade'] > 0:
        # Se a resposta contiver resultados (quantidade de im√≥veis for maior que 0), exibe os im√≥veis encontrados.
        df_imoveis = pd.DataFrame(data['resultados']['imoveis'])
        # Converte os im√≥veis em um DataFrame do Pandas para exibi√ß√£o em tabela.
        st.write("### üè† Resultados da Pesquisa")
        st.dataframe(df_imoveis)
        # Exibe os resultados da pesquisa em uma tabela interativa no frontend do Streamlit.
    elif data:
        st.write("‚ùå Nenhum im√≥vel encontrado para os filtros selecionados.")
        # Se n√£o houver resultados (mas houver dados v√°lidos na resposta), exibe uma mensagem dizendo que 
        # nenhum im√≥vel foi encontrado.

# Bot√£o para buscar im√≥veis
if st.sidebar.button("üîç Buscar Im√≥veis"):
    buscar_imoveis()
    # Quando o bot√£o "Buscar Im√≥veis" √© clicado, chama a fun√ß√£o 'buscar_imoveis' para iniciar a requisi√ß√£o.


